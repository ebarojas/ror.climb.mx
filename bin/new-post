#!/bin/bash

# Check if any arguments are provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 \"Post Title\" [-i folder_name]"
    echo "Example: $0 \"My Amazing Post\""
    echo "Example: $0 \"My Amazing Post\" -i example_folder"
    exit 1
fi

# Initialize variables
IMAGE_FOLDER=""
IMAGES_SECTION=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -i)
            if [ $# -lt 2 ] || [ -z "$2" ]; then
                echo "Error: -i flag requires a folder name"
                echo "Usage: $0 \"Post Title\" [-i folder_name]"
                exit 1
            fi
            IMAGE_FOLDER="$2"
            shift 2
            ;;
        *)
            # First non-flag argument is the title
            if [ -z "$TITLE" ]; then
                TITLE="$1"
            fi
            shift
            ;;
    esac
done

# Check if title was provided
if [ -z "$TITLE" ]; then
    echo "Usage: $0 \"Post Title\" [-i folder_name]"
    echo "Example: $0 \"My Amazing Post\""
    echo "Example: $0 \"My Amazing Post\" -i example_folder"
    exit 1
fi

# If image folder is specified, validate and process images
if [ -n "$IMAGE_FOLDER" ]; then
    FOLDER_PATH="public/imgs/$IMAGE_FOLDER"
    
    # Check if folder exists
    if [ ! -d "$FOLDER_PATH" ]; then
        echo "Folder not found, aborting"
        exit 1
    fi
    
    # Get all image files from the folder
    IMAGE_FILES=$(find "$FOLDER_PATH" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) | sort)
    
    # Count images
    IMAGE_COUNT=$(echo "$IMAGE_FILES" | wc -l)
    
    # Generate images section if images are found
    if [ -n "$IMAGE_FILES" ] && [ "$IMAGE_COUNT" -gt 0 ]; then
        IMAGES_SECTION="### Images

"
        while IFS= read -r image_file; do
            # Extract filename without extension
            filename=$(basename "$image_file")
            name_without_ext="${filename%.*}"
            
            # Add image markdown with caption
            IMAGES_SECTION+="![$name_without_ext](/imgs/$IMAGE_FOLDER/$filename)
*$name_without_ext*

"
        done <<< "$IMAGE_FILES"
    fi
fi

# Get current date in YYYY-MM-DD format
DATE=$(date +"%Y-%m-%d")

# Get current date and time for YAML date field
DATETIME=$(date +"%Y-%m-%d %H:%M:%S +0000")

# Convert title to filename format (spaces to dashes, lowercase)
FILENAME=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/[^a-z0-9-]//g')

# Convert title to permalink format (spaces to underscores, lowercase)
PERMALINK=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g' | sed 's/[^a-z0-9_]//g')

# Create the full filename
FULL_FILENAME="${DATE}-${FILENAME}.md"

# Create the file path
FILE_PATH="app/posts/${FULL_FILENAME}"

# Check if file already exists
if [ -f "$FILE_PATH" ]; then
    echo "Error: File $FILE_PATH already exists!"
    exit 1
fi

# Create the post file with front matter
cat > "$FILE_PATH" << EOF
---
layout: post
title:  "$TITLE"
date:   $DATETIME
categories: general
description: placeholder
permalink: /$PERMALINK/
---

# $TITLE

Your content goes here...

## Subheading Example

This is a paragraph with some **bold text** and *italic text*. You can also use ~~strikethrough~~ for emphasis.

### Code Examples

Here's some inline \`code\` and a code block:

\`\`\`ruby
def hello_world
  puts "Hello, World!"
end
\`\`\`

### Lists

**Unordered list:**
- First item
- Second item
- Third item

**Ordered list:**
1. First step
2. Second step
3. Third step

### Links and Images

Here's a [link to Google](https://google.com) and an image:

![Alt text for image](/imgs/your-image.jpg)

### Blockquotes

> This is a blockquote. It can contain multiple lines
> and is great for highlighting important information
> or quotes from other sources.

### Tables

| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Data 1   | Data 2   | Data 3   |
| Data 4   | Data 5   | Data 6   |

### Horizontal Rule

---

${IMAGES_SECTION}*End of post content*

EOF

echo "Created new post: $FILE_PATH"
echo "Title: $TITLE"
echo "Permalink: /$PERMALINK/"
echo "Filename: $FULL_FILENAME"

# Show image count feedback if images were processed
if [ -n "$IMAGE_FOLDER" ] && [ "$IMAGE_COUNT" -gt 0 ]; then
    echo "Added $IMAGE_COUNT images from $IMAGE_FOLDER"
elif [ -n "$IMAGE_FOLDER" ] && [ "$IMAGE_COUNT" -eq 0 ]; then
    echo "No images found in $IMAGE_FOLDER"
fi
